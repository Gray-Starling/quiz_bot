from aiogram import types
from aiogram import F
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from config import quiz_logger
from db import update_user_current_quiz_id, get_quiz_id, add_question_to_answered, del_user_progress, get_next_question_id, add_question_to_correct, add_question_to_wrong
from utils.questions_loader import questions_loader
from utils.get_question_by_id import get_question_by_id
from handlers.results import callback_results_request
from utils.callback_data import CallbackAnswers
from utils.wait_for_result import wait_for_result
import random

questions_data = questions_loader.get_data()


#####################################################################################
# process_answer


async def process_answer(callback: types.CallbackQuery, is_correct: bool):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å.

    Args:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç –∫–æ–ª–ª–±—ç–∫ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        is_correct (bool): –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª –ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    try:
        await callback.bot.edit_message_reply_markup(
            chat_id=callback.from_user.id,
            message_id=callback.message.message_id,
            reply_markup=None
        )

        current_question_id = await get_quiz_id(callback.from_user.id)

        await add_question_to_answered(callback.from_user.id, current_question_id)

        callback_data = CallbackAnswers.unpack(callback.data)
        option_index = callback_data.option_index
        question = await get_question_by_id(callback_data.id)
        

        await callback.message.answer(f"–í–∞—à –æ—Ç–≤–µ—Ç: <b>'{question["options"][option_index]}'</b>")
        await callback.message.answer("–ò —ç—Ç–æ...")
        await wait_for_result(callback.message)

        if is_correct:
            await add_question_to_correct(callback.from_user.id, current_question_id)
            await callback.message.answer("<b>–í–µ—Ä–Ω–æ! üëç</b>")
        else:
            await add_question_to_wrong(callback.from_user.id, current_question_id)
            await callback.message.answer("<b>–ù–µ –≤–µ—Ä–Ω–æ! üò≠</b>")

        next_question_id = await get_next_question_id(callback.from_user.id, current_question_id)

        if next_question_id:
            await update_user_current_quiz_id(callback.from_user.id, next_question_id)
            await get_question(callback.message, callback.from_user.id)
        else:
            await callback.message.answer("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            await callback_results_request(callback)
    except Exception as e:
        quiz_logger.error(f"–û—à–∏–±–∫–∞ –≤ process_answer. {e}")


#####################################################################################
# wrong_answer


async def wrong_answer(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç –∫–æ–ª–ª–±—ç–∫ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        await process_answer(callback, is_correct=False)
    except Exception as e:
        quiz_logger.error(f"–û—à–∏–±–∫–∞ –≤ wrong_answer. {e}")


#####################################################################################
# right_answer


async def right_answer(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç –∫–æ–ª–ª–±—ç–∫ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        await process_answer(callback, is_correct=True)
    except Exception as e:
        quiz_logger.error(f"–û—à–∏–±–∫–∞ –≤ right_answer. {e}")


#####################################################################################
# generate_options_keyboard


def generate_options_keyboard(answer_options, right_answer, current_question_id):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞.

    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤. –ö–Ω–æ–ø–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—É—á–∞–µ—Ç callback_data "right_answer",
    –∞ –∫–Ω–æ–ø–∫–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ–ª—É—á–∞—é—Ç callback_data "wrong_answer".

    Args:
        answer_options (list): –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤.
        right_answer (str): –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.

    Returns:
        types.InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–≤–∏–∑–µ.
        –û–±—ã—á–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Ö–æ–¥–æ–º –∫–≤–∏–∑–∞, —Ç–∞–∫–∏—Ö –∫–∞–∫ get_question.
    """
    try:
        builder = InlineKeyboardBuilder()
        for idx, option in enumerate(answer_options):
            builder.add(types.InlineKeyboardButton(
                text=option,
                callback_data=CallbackAnswers(is_correct="r" if option == right_answer else "w",id=current_question_id, option_index=idx).pack())
            )

        builder.adjust(1)
        return builder.as_markup()
    except Exception as e:
        quiz_logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_options_keyboard. {e}")


#####################################################################################
# get_question


async def get_question(message, user_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö,
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–µ–µ –∫–æ–º–∞–Ω–¥—É. –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ç–µ–∫—Å—Ç–µ –∫–æ–º–∞–Ω–¥—ã.
        user_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–≤–∏–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        –û–±—ã—á–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Ö–æ–¥–æ–º –∫–≤–∏–∑–∞, —Ç–∞–∫–∏—Ö –∫–∞–∫ new_quiz –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.

    """
    try:
        current_question_id = await get_quiz_id(user_id)
        question = await get_question_by_id(current_question_id)
        if question:
            correct_index = question['correct_option']
            opts = question['options']
            kb = generate_options_keyboard(opts, opts[correct_index], current_question_id)
            await message.answer(f"{question['question']}", reply_markup=kb)
    except Exception as e:
        quiz_logger.error(f"–û—à–∏–±–∫–∞ –≤ get_question. {e}")


#####################################################################################
# new_quiz


async def new_quiz(message, user_id):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –∫–≤–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–µ–µ –∫–æ–º–∞–Ω–¥—É. –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ç–µ–∫—Å—Ç–µ –∫–æ–º–∞–Ω–¥—ã.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ cmd_new_quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–∏–∑.

    """
    try:
        current_question_id = random.randint(1, len(questions_data))
        await update_user_current_quiz_id(user_id, current_question_id)

        await get_question(message, user_id)
    except Exception as e:
        quiz_logger.error(f"–û—à–∏–±–∫–∞ –≤ new_quiz. {e}")


#####################################################################################
# cmd_resume_quiz


async def cmd_resume_quiz(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫–≤–∏–∑–∞.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–µ–µ –∫–æ–º–∞–Ω–¥—É.
    """
    try:
        builder = ReplyKeyboardBuilder()

        builder.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"))
        builder.add(types.KeyboardButton(text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"))

        await message.answer("–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.", reply_markup=builder.as_markup(resize_keyboard=True))
        await get_question(message, message.from_user.id)
        quiz_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª –∏–≥—Ä—É")
    except Exception as e:
        quiz_logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_resume_quiz. {e}")


#####################################################################################
# callback_resume_quiz


async def callback_resume_quiz(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫–≤–∏–∑–∞.

    Args:
        callback (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        await callback.bot.edit_message_reply_markup(
            chat_id=callback.from_user.id,
            message_id=callback.message.message_id,
            reply_markup=None
        )
        await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.")
        await get_question(callback.message, callback.message.chat.id)
    except Exception as e:
        quiz_logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_resume_quiz. {e}")


#####################################################################################
# restart_quiz


async def restart_quiz(callback: types.CallbackQuery):
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–≤–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

    –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π –∫–≤–∏–∑.

    Args:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç –∫–æ–ª–ª–±—ç–∫ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∂–µ–ª–∞–Ω–∏–µ –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑ –∑–∞–Ω–æ–≤–æ.
        –£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π –∫–≤–∏–∑.
    """
    try:
        await callback.bot.edit_message_reply_markup(
            chat_id=callback.from_user.id,
            message_id=callback.message.message_id,
            reply_markup=None
        )
        await del_user_progress(callback.from_user.id)
        await callback.message.answer("–ö–≤–∏–∑ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∫–≤–∏–∑...")
        await new_quiz(callback.message, callback.message.chat.id)
    except Exception as e:
        quiz_logger.error(f"–û—à–∏–±–∫–∞ –≤ restart_quiz. {e}")


#####################################################################################
# restart_quiz_confirm


async def restart_quiz_confirm(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –∂–µ–ª–∞–Ω–∏–∏ –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑ –∑–∞–Ω–æ–≤–æ.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ –∂–µ–ª–∞–Ω–∏–∏ –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑ –∑–∞–Ω–æ–≤–æ.
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç" –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    try:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="–î–∞",
            callback_data="want_to_restart")
        )
        builder.add(types.InlineKeyboardButton(
            text="–ù–µ—Ç",
            callback_data="dont_want_to_restart")
        )

        builder.adjust(1)
        markup = builder.as_markup()
        await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å quiz –∑–∞–Ω–æ–≤–æ?", reply_markup=markup)
    except Exception as e:
        quiz_logger.error(f"–û—à–∏–±–∫–∞ –≤ restart_quiz_confirm. {e}")


#####################################################################################
# cmd_new_quiz


async def cmd_new_quiz(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–≤–∏–∑ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /quiz –∏–ª–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É".

    –ó–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –∏ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é new_quiz –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∫–≤–∏–∑–∞.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–µ–µ –∫–æ–º–∞–Ω–¥—É. –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ç–µ–∫—Å—Ç–µ –∫–æ–º–∞–Ω–¥—ã.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ –±–æ—Ç–∞:

        dp.message.register(cmd_new_quiz, F.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
        dp.message.register(cmd_new_quiz, Command("quiz"))
    """
    try:
        builder = ReplyKeyboardBuilder()

        builder.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"))
        builder.add(types.KeyboardButton(text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"))

        await message.answer("–ú—ã –Ω–∞—á–∏–Ω–∞–µ–º. –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å...", reply_markup=builder.as_markup(resize_keyboard=True))

        await new_quiz(message, message.from_user.id)
    except Exception as e:
        quiz_logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_new_quiz. {e}")